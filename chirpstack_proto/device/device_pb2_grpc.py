# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from chirpstack_proto.common import common_pb2 as common__pb2
from chirpstack_proto.device import device_pb2 as device__pb2

class DeviceServiceStub(object):
    """Stub for DeviceService."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
            "/device.DeviceService/Get",
            request_serializer=device__pb2.GetDeviceRequest.SerializeToString,
            response_deserializer=common__pb2.KeyValue.FromString,
        )


class DeviceServiceServicer(object):
    """The server API for DeviceService."""

    def Get(self, request, context):
        """Get a device by DevEUI"""
        raise NotImplementedError("Method not implemented!")


def add_DeviceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Get": grpc.unary_unary_rpc_method_handler(
            servicer.Get,
            request_deserializer=device__pb2.GetDeviceRequest.FromString,
            response_serializer=common__pb2.KeyValue.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "device.DeviceService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))